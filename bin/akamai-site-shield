"""
Copyright 2017 Akamai Technologies, Inc. All Rights Reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
"""
"""
This code leverages akamai OPEN API. to control Certificates deployed in Akamai Network.
In case you need quick explanation contact the initiators.
Initiators: vbhat@akamai.com, aetsai@akamai.com, mkilmer@akamai.com
"""
import json
from firewallruleswrapper import fireShield
import requests
import os
import logging
import configparser
import sys
from prettytable import PrettyTable
from akamai.edgegrid import EdgeGridAuth, EdgeRc
import dateutil.parser
import click

PACKAGE_VERSION = "0.2.2"

# Setup logging
if not os.path.exists('logs'):
    os.makedirs('logs')
log_file = os.path.join('logs', 'akamai-firewall-rules.log')

# Set the format of logging in console and file separately
log_formatter = logging.Formatter(
    "%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s")
console_formatter = logging.Formatter("%(message)s")
root_logger = logging.getLogger()

logfile_handler = logging.FileHandler(log_file, mode='w')
logfile_handler.setFormatter(log_formatter)
root_logger.addHandler(logfile_handler)

console_handler = logging.StreamHandler()
console_handler.setFormatter(console_formatter)
root_logger.addHandler(console_handler)
# Set Log Level to DEBUG, INFO, WARNING, ERROR, CRITICAL
root_logger.setLevel(logging.INFO)

class Config(object):
    def __init__(self):
        pass
pass_config = click.make_pass_decorator(Config, ensure=True)

@click.group(context_settings={'help_option_names':['-h','--help']})
@click.option('--edgerc', default=os.path.join(os.path.expanduser("~"),'.edgerc'),help='Location of the credentials file [$AKAMAI_EDGERC]', required=False)
@click.option('--section', help='Section of the credentials file [$AKAMAI_EDGERC_SECTION]', required=False)
@click.option('--account-key', help='Account Key', required=False)
@click.version_option(version=PACKAGE_VERSION)
@pass_config
def cli(config, edgerc, section, account_key):
    '''
    Akamai CLI for Firewall Rules
    '''
    config.edgerc = edgerc
    config.section = section
    config.account_key = account_key

@cli.command()
@click.pass_context
def help(ctx):
    '''
    Show help information
    '''
    print(ctx.parent.get_help())

@cli.command()
@pass_config
def list_maps(config):
    '''
    List the available Site Shield maps
    '''
    base_url, session = init_config(config.edgerc, config.section)
    fire_shield_object = fireShield(base_url, config.account_key)
    root_logger.info('Fetching Site Shield Maps...')

    list_maps_response = fire_shield_object.list_maps(session)

    if list_maps_response.status_code == 200:
        #root_logger.info(json.dumps(list_maps_response.json(), indent=4))
        table = PrettyTable(['Map ID',
                             'Map Name',
                             'Map Alias',
                             'Status',
                             'Last Acknowledged By',
                             'Acknowledge Date',
                             'Contact Info'])
        table.align = "l"

        if len(list_maps_response.json()['siteShieldMaps']) == 0:
            root_logger.info('No Site Shield maps found...')
            exit(-1)
        for eachItem in list_maps_response.json()['siteShieldMaps']:
            rowData = []
            if eachItem['acknowledged'] is False:
                status = 'UPDATES PENDING'
            else:
                status = 'Up-To-Date'

            mapId = eachItem['id']
            ruleName = eachItem['ruleName']
            mapAlias = eachItem['mapAlias']
            if "acknowledgedBy" in eachItem:
                acknowledgedBy = eachItem['acknowledgedBy']
            else:
                acknowledgedBy = ''
            if "acknowledgedOn" in eachItem:
                try:
                    acknowledgedOn = eachItem['acknowledgedOn']
                    acknowledgedOn = dateutil.parser.parse(acknowledgedOn)
                    acknowledgedOn = str(acknowledgedOn.strftime('%m/%d/%Y %H:%M')) + ' UTC'
                except:
                    acknowledgedOn = eachItem['acknowledgedOn']
            else:
                acknowledgedOn = ''
            contacts = ''
            for eachContact in eachItem['contacts']:
                contacts = eachContact + ' ' + contacts
            rowData.append(mapId)
            rowData.append(ruleName)
            rowData.append(mapAlias)
            rowData.append(status)
            rowData.append(acknowledgedBy)
            rowData.append(acknowledgedOn)
            rowData.append(contacts)

            table.add_row(rowData)
        root_logger.info(table)
    else:
        root_logger.info(json.dumps(list_maps_response.json(), indent=4))

@cli.command()
@click.option('--map-name', help='Name of the map within SINGLE quotes', required=False)
@click.option('--map-id', help='ID of the map', required=False)
@click.option('--json','optjson', help='Output format in json', is_flag=True, required=False)
@pass_config
def list_cidrs(config, map_name, map_id, optjson):
    '''
    List the CIDRs for a specific Site Shield map
    '''
    if map_id and map_name:
        root_logger.info(
            'You cannot specify both --map-id and --map-name. Please choose one.')
        exit(-1)
    if not map_id and not map_name:
        root_logger.info('Specify either of --map-id or --map-name.')
        exit(-1)
    base_url, session = init_config(config.edgerc, config.section)
    fire_shield_object = fireShield(base_url, config.account_key)
    if not optjson:
        root_logger.info('Fetching Site Shield CIDR blocks...\n')

    list_maps_response = fire_shield_object.list_maps(session)

    if list_maps_response.status_code == 200:
        #root_logger.info(json.dumps(list_maps_response.json(), indent=4))
        mapFound = False
        table = PrettyTable(
            ['Map Name', 'CIDR Block'])
        table.align = "l"

        for eachItem in list_maps_response.json()['siteShieldMaps']:
            if map_name:
                if eachItem['ruleName'].upper() == map_name.upper():
                    mapFound = True
                    if eachItem['acknowledged'] is True:
                        ip_block = eachItem['currentCidrs']
                    else:
                        ip_block = eachItem['proposedCidrs']
                    if not optjson:
                        for eachAddress in ip_block:
                            rowData = []
                            rowData.append(eachItem['ruleName'])
                            rowData.append(eachAddress)
                            table.add_row(rowData)
                        print(table)
                    else:
                        print(json.dumps(eachItem, indent=4))
            elif map_id:
                if str(eachItem['id']) == str(map_id):
                    mapFound = True
                    if eachItem['acknowledged'] is True:
                        ip_block = eachItem['currentCidrs']
                    else:
                        ip_block = eachItem['proposedCidrs']
                    if not optjson:
                        for eachAddress in ip_block:
                            rowData = []
                            rowData.append(eachItem['ruleName'])
                            rowData.append(eachAddress)
                            table.add_row(rowData)
                        print(table)
                    else:
                        print(json.dumps(eachItem, indent=4))

        if mapFound is False:
            root_logger.info(
                'Unable to find the map. Please check the --map-name or --map-id')
            exit(-1)

    else:
        root_logger.info(json.dumps(list_maps_response.json(), indent=4))


@cli.command()
@click.option('--map-name', help='Name of the map within SINGLE quotes', required=False)
@click.option('--map-id', help='ID of the map', required=False)
@pass_config
def acknowledge(config, map_name, map_id):
    '''
    Acknowledge a pending Site Shield map update
    '''
    if map_id and map_name:
        root_logger.info(
            'You cannot specify both --map-id and --map-name. Please choose one.')
        exit(-1)
    if not map_id and not map_name:
        root_logger.info('Specify either of --map-id or --map-name.')
        exit(-1)
    base_url, session = init_config(config.edgerc, config.section)
    fire_shield_object = fireShield(base_url, config.account_key)
    root_logger.info('Fetching Site Shield maps...\n')
    list_maps_response = fire_shield_object.list_maps(session)
    if list_maps_response.status_code == 200:
        #root_logger.info(json.dumps(list_maps_response.json(), indent=4))
        mapFound = False
        for eachItem in list_maps_response.json()['siteShieldMaps']:
            if map_name:
                if eachItem['ruleName'].upper() == map_name.upper():
                    mapFound = True
                    mapId = eachItem['id']
            elif map_id:
                if str(eachItem['id']) == str(map_id):
                    mapFound = True
                    mapId = eachItem['id']
        if mapFound is False:
            root_logger.info(
                'Unable to find the map. Please check the --map-name or --map-id')
            exit(-1)
        else:
            #Check whether there is some update to ack
            update_pending = 0
            list_maps_response = fire_shield_object.list_maps(session)

            if list_maps_response.status_code == 200:
                if len(list_maps_response.json()['siteShieldMaps']) == 0:
                    root_logger.info('No Site Shield maps found...')
                    exit(-1)
                for eachItem in list_maps_response.json()['siteShieldMaps']:
                    if str(eachItem['id']) == str(mapId):
                        if eachItem['acknowledged'] is False:
                            update_pending = 1
            else:
                root_logger.info(json.dumps(list_maps_response.json(), indent=4))

            if update_pending == 1:
                root_logger.info('Acknowledging Site Shield map: ' + str(mapId) + '\n')
                acknowledge_mapResponse = fire_shield_object.acknowledge_map(
                    session, mapId)
                if acknowledge_mapResponse.status_code == 200:
                    root_logger.info('Successfully acknowledged!')
                else:
                    root_logger.info('Unknown error: Acknowledgement unsuccessful')
                    root_logger.info(
                        json.dumps(
                            acknowledge_mapResponse.json(),
                            indent=4))
                    exit(-1)
            else:
                #There was nothing to Acknowledge
                root_logger.info('There is no update to be acknowledged.')
    else:
        root_logger.info(json.dumps(list_maps_response.json(), indent=4))

def init_config(edgerc_file, section):
    if not edgerc_file:
        if not os.getenv("AKAMAI_EDGERC"):
            edgerc_file = os.path.join(os.path.expanduser("~"), '.edgerc')
        else:
            edgerc_file = os.getenv("AKAMAI_EDGERC")
    if not os.access(edgerc_file, os.R_OK):
        root_logger.error("Unable to read edgerc file \"%s\"" % edgerc_file)
        exit(1)
    if not section:
        if not os.getenv("AKAMAI_EDGERC_SECTION"):
            section = "site-shield"
        else:
            section = os.getenv("AKAMAI_EDGERC_SECTION")
    try:
        edgerc = EdgeRc(edgerc_file)
        base_url = edgerc.get(section, 'host')

        session = requests.Session()
        session.auth = EdgeGridAuth.from_edgerc(edgerc, section)

        return base_url, session
    except configparser.NoSectionError:
        root_logger.error("Edgerc section \"%s\" not found" % section)
        exit(1)
    except Exception:
        root_logger.info(
            "Unknown error occurred trying to read edgerc file (%s)" %
            edgerc_file)
        exit(1)

def get_prog_name():
    prog = os.path.basename(sys.argv[0])
    if os.getenv("AKAMAI_CLI"):
        prog = "akamai site-shield"
    return prog

def get_cache_dir():
    if os.getenv("AKAMAI_CLI_CACHE_DIR"):
        return os.getenv("AKAMAI_CLI_CACHE_DIR")
    return os.curdir

# Final or common Successful exit
if __name__ == '__main__':
    try:
        status = cli(prog_name='site-shield')
        exit(status)
    except KeyboardInterrupt:
        exit(1)
