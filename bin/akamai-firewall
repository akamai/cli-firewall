"""
Copyright 2017 Akamai Technologies, Inc. All Rights Reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
"""

"""
This code leverages akamai OPEN API. to control Certificates deployed in Akamai Network.
In case you need quick explanation contact the initiators.
Initiators: vbhat@akamai.com, aetsai@akamai.com, mkilmer@akamai.com
"""
import json
from firewallruleswrapper import fireShield
import requests
import os
import configparser
import logging
import sys
from prettytable import PrettyTable
from akamai.edgegrid import EdgeGridAuth, EdgeRc
import datetime
import click

PACKAGE_VERSION = "0.2.1"

# Setup logging
if not os.path.exists('logs'):
    os.makedirs('logs')
log_file = os.path.join('logs', 'akamai-firewall-rules.log')

# Set the format of logging in console and file separately
log_formatter = logging.Formatter(
    "%(asctime)s [%(threadName)-12.12s] [%(levelname)-5.5s]  %(message)s")
console_formatter = logging.Formatter("%(message)s")
root_logger = logging.getLogger()

logfile_handler = logging.FileHandler(log_file, mode='w')
logfile_handler.setFormatter(log_formatter)
root_logger.addHandler(logfile_handler)

console_handler = logging.StreamHandler()
console_handler.setFormatter(console_formatter)
root_logger.addHandler(console_handler)
# Set Log Level to DEBUG, INFO, WARNING, ERROR, CRITICAL
root_logger.setLevel(logging.INFO)

class Config(object):
    def __init__(self):
        pass
pass_config = click.make_pass_decorator(Config, ensure=True)

@click.group(context_settings={'help_option_names':['-h','--help']})
@click.option('--edgerc', default=os.path.join(os.path.expanduser("~"),'.edgerc'),help='Location of the credentials file [$AKAMAI_EDGERC]', required=False)
@click.option('--section', help='Section of the credentials file [$AKAMAI_EDGERC_SECTION]', required=False)
@click.option('--account-key', help='Account Key', required=False)
@click.version_option(version=PACKAGE_VERSION)
@pass_config
def cli(config, edgerc, section, account_key):
    '''
    Akamai CLI for Firewall Rules
    '''
    config.edgerc = edgerc
    config.section = section
    config.account_key = account_key

@cli.command()
@click.pass_context
def help(ctx):
    '''
    Show help information
    '''
    print(ctx.parent.get_help())

@cli.command()
@pass_config
def list_services(config):
    '''
    List all firewall rules services available
    '''
    base_url, session = init_config(config.edgerc, config.section)
    fire_shield_object = fireShield(base_url, config.account_key)
    list_services_response = fire_shield_object.list_services(session)
    if list_services_response.status_code == 200:
        #root_logger.info(json.dumps(list_services_response.json(), indent=4))
        table = PrettyTable(
            ['Service ID', 'Service Name', 'Service Description'])
        table.align = "l"

        for eachItem in list_services_response.json():
            rowData = []
            serviceId = eachItem['serviceId']
            serviceName = eachItem['serviceName']
            description = eachItem['description']
            rowData.append(serviceId)
            rowData.append(serviceName)
            rowData.append(description)
            table.add_row(rowData)
        root_logger.info(table)
    else:
        root_logger.info(json.dumps(list_services_response.json(), indent=4))

@cli.command()
@pass_config
def list_subscriptions(config):
    '''
    List current subscriptions
    '''
    base_url, session = init_config(config.edgerc, config.section)
    fire_shield_object = fireShield(base_url, config.account_key)
    list_subscriptions_response = fire_shield_object.list_subscriptions(session)
    #root_logger.info(json.dumps(list_subscriptions_response.json(), indent=4))
    if list_subscriptions_response.status_code == 200:
        if len(list_subscriptions_response.json()['subscriptions']) == 0:
            root_logger.info('No subscriptions found.')
            exit(-1)
        #root_logger.info(json.dumps(list_services_response.json(), indent=4))
        table = PrettyTable(
            ['Sign-up-Date', 'Email', 'Service ID', 'Service Name', 'Service Description'])
        table.align = "l"

        for eachItem in list_subscriptions_response.json()['subscriptions']:
            rowData = []
            rowData.append(eachItem['signupDate'])
            rowData.append(eachItem['email'])
            rowData.append(eachItem['serviceId'])
            rowData.append(eachItem['serviceName'])
            rowData.append(eachItem['description'])
            table.add_row(rowData)
        root_logger.info(table)
    else:
        root_logger.info(json.dumps(list_subscriptions_response.json(), indent=4))

@cli.command()
@click.option('--service-name', help='Name of the service to be subscribed to within SINGLE quotes', required=False)
@click.option('--service-id', help='ID of the service to be subscribed to', required=False)
@click.option('--email', help='Email Id of the subscriber', required=True)
@pass_config
def subscribe(config, service_name, service_id, email):
    '''
    Subscribe to a firewall rules service
    '''
    if service_id and service_name:
        root_logger.info(
            'You cannot specify both --service-id and --service-name. Please choose one.')
        exit(-1)
    if not service_id and not service_name:
        root_logger.info('Specify either of --service-id or --service-name.')
        exit(-1)
    base_url, session = init_config(config.edgerc, config.section)
    fire_shield_object = fireShield(base_url, config.account_key)
    root_logger.info('Validating service name...')
    validService = False
    list_services_response = fire_shield_object.list_services(session)
    if list_services_response.status_code == 200:
        for eachItem in list_services_response.json():
            if service_id:
                if int(service_id) == int(eachItem['serviceId']):
                    validService = True
                    serviceId = service_id
                    break
            if service_name:
                if service_name.upper() == eachItem['serviceName'].upper():
                    validService = True
                    serviceId = eachItem['serviceId']
                    break
    else:
        root_logger.info(json.dumps(list_services_response.json(), indent=4))

    if validService is False:
        root_logger.info(
            'Invalid service name... You can run list-services to see available service names.\n')
        exit(-1)
    else:
        root_logger.info('Updating current subscription...\n')
        list_subscriptions_response = fire_shield_object.list_subscriptions(
            session)
        if list_subscriptions_response.status_code == 200:
            # Proceed to update the subscriptions
            newSubscription = {}
            newSubscription['email'] = email
            newSubscription['serviceId'] = int(serviceId)
            subscriptionData = list_subscriptions_response.json()
            subscriptionData['subscriptions'].append(newSubscription)
            #root_logger.info(json.dumps(subscriptionData, indent=4))
            update_subscriptionsRespose = fire_shield_object.update_subscriptions(
                session, json.dumps(subscriptionData))
            if update_subscriptionsRespose.status_code == 200:
                root_logger.info('Subscription updated successfully!\n')
            else:
                root_logger.info(
                    json.dumps(
                        update_subscriptionsRespose.json(),
                        indent=4))
        else:
            root_logger.info(json.dumps(list_subscriptions_response.json(), indent=4))

@cli.command()
@click.option('--service-name', help='Name of the service to be unsubscribed from within SINGLE quotes', required=False)
@click.option('--service-id', help='ID of the service to be unsubscribed from', required=False)
@click.option('--email', help='Email Id of the subscriber', required=True)
@pass_config
def unsubscribe(config, service_name, service_id, email):
    '''
    Unsubscribe from a firewall rules service
    '''
    if service_id and service_name:
        root_logger.info(
            'You cannot specify both --service-id and --service-name. Please choose one.')
        exit(-1)
    if not service_id and not service_name:
        root_logger.info('Specify either of --service-id or --service-name.')
        exit(-1)
    base_url, session = init_config(config.edgerc, config.section)
    fire_shield_object = fireShield(base_url, config.account_key)
    root_logger.info('Validating service name...')
    list_subscriptions_response = fire_shield_object.list_subscriptions(session)
    validService = False
    if list_subscriptions_response.status_code == 200:
        subscriptionData = list_subscriptions_response.json()
        # Using Index to iterate and delete the item from list
        index = 0
        for everySubscription in subscriptionData['subscriptions']:
            if service_id:
                if int(service_id) == int(everySubscription['serviceId']):
                    if email == everySubscription['email']:
                        validService = True
                        serviceName = everySubscription['serviceName']
                        del subscriptionData['subscriptions'][index]
                        break
            if service_name:
                if service_name.upper() == everySubscription['serviceName'].upper():
                    if email == everySubscription['email']:
                        validService = True
                        serviceName = everySubscription['serviceName']
                        del subscriptionData['subscriptions'][index]
                        break
            index += 1
        #root_logger.info(json.dumps(subscriptionData, indent=4))
        if validService is True:
            #root_logger.info('Updating the subscription by unsubscribing to: ' + serviceName)
            update_subscriptionsRespose = fire_shield_object.update_subscriptions(
                session, json.dumps(subscriptionData))
            if update_subscriptionsRespose.status_code == 200:
                root_logger.info('Subscription unsubscribed successfully!\n')
            else:
                root_logger.info(
                    json.dumps(
                        update_subscriptionsRespose.json(),
                        indent=4))
        else:
            root_logger.info(
                'Current subscription not found...\n')
            exit(-1)
    else:
        root_logger.info(json.dumps(list_subscriptions_response.json(), indent=4))

@cli.command()
@click.option('--service-name', help='Name of the service within SINGLE quotes', required=False)
@click.option('--service-id', help='Id of the service', required=False)
@click.option('--json','optjson', help='output format in json', is_flag=True, required=False)
@pass_config
def list_cidrs(config, service_name, service_id, optjson):
    '''
    List the CIDRs for current subscription or a specific firewall rules service
    '''
    base_url, session = init_config(config.edgerc, config.section)
    fire_shield_object = fireShield(base_url, config.account_key)
    root_logger.info('Fetching CIDR blocks...')
    list_cidrResponse = fire_shield_object.list_cidr(session)
    #root_logger.info(json.dumps(list_cidrResponse.json(), indent=4))
    if list_cidrResponse.status_code == 200:
        #root_logger.info(json.dumps(list_services_response.json(), indent=4))
        table = PrettyTable(
            ['Service Name', 'CIDR Block', 'Port', 'Activation Date'])
        table.align = "l"
        if len(list_cidrResponse.json()) == 0:
            root_logger.info('No subscriptions exist...')
            exit(-1)
        specific_service_json = []
        for eachItem in list_cidrResponse.json():
            rowData = []
            if service_name:
                if service_name.upper() == eachItem['serviceName'].upper():
                    if not optjson:
                        rowData.append(eachItem['serviceName'])
                        rowData.append(
                            str(eachItem['cidr']) + str(eachItem['cidrMask']))
                        rowData.append(eachItem['port'])
                        rowData.append(eachItem['effectiveDate'])
                        table.add_row(rowData)
                    else:
                        specific_service_json.append(eachItem)
            elif service_id:
                if str(service_id) == str(eachItem['serviceId']):
                    if not optjson:
                        rowData.append(eachItem['serviceName'])
                        rowData.append(
                            str(eachItem['cidr']) + str(eachItem['cidrMask']))
                        rowData.append(eachItem['port'])
                        rowData.append(eachItem['effectiveDate'])
                        table.add_row(rowData)
                    else:
                        specific_service_json.append(eachItem)
            else:
                if not optjson:
                    rowData.append(eachItem['serviceName'])
                    rowData.append(
                        str(eachItem['cidr']) + str(eachItem['cidrMask']))
                    rowData.append(eachItem['port'])
                    rowData.append(eachItem['effectiveDate'])
                    table.add_row(rowData)
                else:
                    specific_service_json.append(eachItem)
        if not optjson:
            print(table.get_string(sortby="Service Name"))
        else:
            process_json_output(specific_service_json)
    else:
        root_logger.info(json.dumps(list_cidrResponse.json(), indent=4))

def init_config(edgerc_file, section):
    if not edgerc_file:
        if not os.getenv("AKAMAI_EDGERC"):
            edgerc_file = os.path.join(os.path.expanduser("~"), '.edgerc')
        else:
            edgerc_file = os.getenv("AKAMAI_EDGERC")
    if not os.access(edgerc_file, os.R_OK):
        root_logger.error("Unable to read edgerc file \"%s\"" % edgerc_file)
        exit(1)
    if not section:
        if not os.getenv("AKAMAI_EDGERC_SECTION"):
            section = "firewall"
        else:
            section = os.getenv("AKAMAI_EDGERC_SECTION")
    try:
        edgerc = EdgeRc(edgerc_file)
        base_url = edgerc.get(section, 'host')

        session = requests.Session()
        session.auth = EdgeGridAuth.from_edgerc(edgerc, section)
        return base_url, session
    except configparser.NoSectionError:
        root_logger.error("Edgerc section \"%s\" not found" % section)
        exit(1)
    except Exception:
        root_logger.info(
            "Unknown error occurred trying to read edgerc file (%s)" %
            edgerc_file)
        exit(1)

def process_json_output(json_response):
    serviceid_set = set()
    collated_list = []
    #Play with two datastructures to collate all IP addresses
    for every_block in json_response:
        if every_block['serviceId'] in serviceid_set:
            for every_block_of_collated_list in collated_list:
                if every_block_of_collated_list['serviceId'] == every_block['serviceId']:
                    if 'IPs' in every_block_of_collated_list:
                        every_block_of_collated_list['IPs'].append(every_block['cidr'] + every_block['cidrMask'])
                    else:
                        every_block_of_collated_list['IPs'] = [every_block['cidr'] + every_block['cidrMask']]
        else:
            every_block['IPs'] = [every_block['cidr'] + every_block['cidrMask']]
            collated_list.append(every_block)
            serviceid_set.add(every_block['serviceId'])
    #Remove the un-necessary items
    for every_final_block in collated_list:
        try:
            del every_final_block['cidr']
            del every_final_block['cidrMask']
            del every_final_block['creationDate']
            del every_final_block['effectiveDate']
            del every_final_block['changeDate']
            del every_final_block['lastAction']
            del every_final_block['minIp']
            del every_final_block['maxIp']
            del every_final_block['port']
            del every_final_block['proposedCidrs']
        except KeyError:
            pass
    #Finally print the items
    print(json.dumps(collated_list, indent=4))

def get_prog_name():
    prog = os.path.basename(sys.argv[0])
    if os.getenv("AKAMAI_CLI"):
        prog = "akamai firewall"
    return prog

def get_cache_dir():
    if os.getenv("AKAMAI_CLI_CACHE_DIR"):
        return os.getenv("AKAMAI_CLI_CACHE_DIR")

    return os.curdir

# Final or common Successful exit
if __name__ == '__main__':
    try:
        status = cli(prog_name='firewall')
        exit(status)
    except KeyboardInterrupt:
        exit(1)